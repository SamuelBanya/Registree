#+TODO: TODO(t) IN-PROGRESS (p) | DONE(d) CANCELLED(c)
#+PRIORITIES: 1 5 3
* Jira Tickets
** Todo
*** TODO Add the 'ASP.NET' backend to the project as well
<2023-05-19 Fri 14:01>: I plan on adding the 'ASP.NET' backend later.

Related links to use for reference:
- Related API link to ASP.NET API:
- https://dotnet.microsoft.com/en-us/apps/aspnet/apis
- Related general ASP.NET link as well:
- https://dotnet.microsoft.com/en-us/apps/aspnet

I will have to create a related database schema for what I expect to store in the backend.

From the top of my head, this is probably what I should use in terms of database entries for anyone who wants to 'login' to the app to create private lists since I want people to just use the app if they don't care about privacy, but give them the option to be a bit more secure if they want to:
- User:
- Email address
- Instagram account
- Facebook account
- TikTok account

Related YouTube videos for reference:
- #1 - Build Quiz App in React & Asp.Net Core Web API with Latest Material UI (https://www.youtube.com/watch?v=MV1rEWlcW7U)
- React with .NET Web API â€“ Basic App Tutorial (https://www.youtube.com/watch?v=4RKuyp_bOhY)

Related guides for reference:
- https://learn.microsoft.com/en-us/visualstudio/javascript/tutorial-asp-net-core-with-react?view=vs-2022
- https://medium.com/bb-tutorials-and-thoughts/how-to-develop-and-build-react-app-with-net-core-backend-59d4fc5e3041
- https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-5.0&tabs=visual-studio

*** TODO Make sure that the website is mobile responsive to all devices at the very beginning to prevent layout issues later on
<2023-05-18 Thu 16:36>: I will need to check out the React Native docs to see if this is taken care of, or if this is something I just have to implement via '@media' tags at the very beginning of the project.
** In Progress
*** IN-PROGRESS Match Figma template to actual React Native App for 'List' page
<2023-06-10 Sat 10:33>: The current goal is to get the 'List' page to match my Figma template.

This will first involve the use of gradients which apparently aren't even supported by React Native by default.

With this in mind, I had to resort to using 'react-native-linear-gradient' to do this:
- https://www.npmjs.com/package/react-native-linear-gradient

I installed this by using the following:
#+BEGIN_SRC bash
npm install react-native-linear-gradient --save
#+END_SRC

<2023-06-10 Sat 10:42>: I will have to actually model the Figma template later but it doesn't look that hard based upon the docs above.

** Complete
*** DONE Come up with app name that doesn't already exist
<2023-05-16 Tue 11:17>: I thought of using the name 'Gifter', but it's already taken which totally sucks:
- https://wegifter.co/

However, to be fair, that website and app is completely dedicated to children gifts and not at all related to the ideas I had.

My idea was to make the process of assembling gift lists with links way easier.

The process would include:
- A super easy to use gift intake form which includes name of gift, price, and link to the actual gift (Amazon, Walmart, eBay, etc)
- No need to authenticate to use the app, only if you want to store previous lists for future reference that are associated to your account
- Shortened URL links to quickly share with your friends and family

<2023-05-16 Tue 11:29>: I tried to use the following sites to generate names:
- https://www.panabee.com/app-name/ideas
- https://www.wix.com/tools/bng-list
- https://namelix.com/app/

Idea names:
- Linker
- Linkwrap
- Tanglify
- SurpriseSwap
- Giftee (taken)
- Giftomania (Tina's idea) (taken)
- Giftshare (taken)
- Giftly (taken)
- Quick Gifts (taken)
- Giver (taken)
- GiftTree (taken)
- Gift Linker (taken)
- Givey (taken)

Other ideas to generate names
- Secret santa all year
- Presents
- Sharing
- Link
- Hub
- List
- Giving

<2023-05-16 Tue 16:47>: I have tried to wrap my head around an idea for a name all day but just can't think of a good one yet.

The main ideas I want to get across in a name is the idea to share gifts easily with shortened, spreadable links.

I wanted to basically do what Linktree is doing, but for gifts since I always hated having to figure out what people wanted for Christmas because they never sent me a list of what to surprise them with.

<2023-05-18 Thu 13:34>: I settled with the name 'Registree' so I'm glad that's not taken. It's crazy since every other single name pretty was taken but I guess this is a very popular idea to do, so time for my spin on it :)
*** DONE Make Figma wireframe template for website, iPad, and mobile (iPhone / Android) versions of the "Registree" portion of the application
<2023-05-16 Tue 11:24>: I need to make a Figma wireframe that incorporates the following design patterns:
- Website (normal desktop resolution)
- iPad
- Mobile devices (iPhone, Android)

There are simpler ways to deal with this using the '@media' tag so try this method first, or see if React Native allows you to do this automatically.

Or, see if Tailwind CSS or Material UI can be used for this purpose alone.

<2023-05-16 Tue 11:42>: I really like how this form looks, so this would be a good design idea for the 'login' / 'register' screen:
- https://www.brandbucket.com/app-name-generator

<2023-05-18 Thu 14:56>: My current design template can be found here:
- https://www.figma.com/file/1Bs8zp5JTaQrc2IvCFwrpH/Registree

Some good guides and resources I found along the way include the following:
- https://hackernoon.com/10-best-free-vector-icon-resources-for-app-design-web-design-in-2018-24e02704331b
- https://www.freepik.com/

In my search to find the '2x3' circle grid icon, I found this really good explanation of the colloquial names for some of the menu icons in general:
- https://ux.stackexchange.com/questions/115468/what-is-the-difference-between-these-2-menu-icons-3-dots-kebab-and-3-lines-h

I found this one to be close, but it's '3x3' instead:
- https://www.freepik.com/free-icon/menu_15601292.htm

I went ahead and modified that grid icon to be '2x3' instead manually, so I was able to fix the problem.

I really like the style of these kind of black and white icons here but these are primarily for social media:
- https://www.freepik.com/free-vector/social-media-icons-vector-set-with-facebook-instagram-twitter-tiktok-youtube-logos_17221200.htm#query=Amazon%20icon&position=0&from_view=search&track=ais

<2023-05-18 Thu 16:18>: I found the Amazon icon here and they even offer svg icons too:
- https://icons8.com/icons/set/amazon

I found the eBay one right here too:
- https://icons8.com/icons/set/ebay

I found the Walmart icon here:
- https://icons8.com/icons/set/walmart

I found the Target icon here:
- https://icons8.com/icons/set/target-logo

I found the Clipboard icon here:
- https://icons8.com/icons/set/clipboard-icon

I found a more black color themed clipboard icon here:
- https://freesvg.org/checklist-silhouette

I found the Share icon here:
- https://icons8.com/icon/set/share/sf-black-filled

I found the Profile icon here:
- https://freesvg.org/users-profile-icon

<2023-05-18 Thu 16:57>: For the bottom buttons of the app, I can easily just find related SVG icons for something like the following:
- Lists
- Share
- Profile

I would be interested if I could find a way to somehow take the existing mobile ready frame design and just scale it up to iPad without heavily having to adjust sizes too much. There's got to be a way to do this, so I will do some research into this.

Also, this app is going to come in super handy for my actual baby shower registry coming up this year :)

<2023-05-18 Thu 17:15>: Also, for future reference, here is the Linktree image I used as a reference for the overall design since this is really just a clone app that's taken to the next level with a separate mindset:
- https://linktr.ee/blog/the-power-of-linktree-in-the-palm-of-your-hand-introducing-our-new-mobile-app/

<2023-05-19 Fri 13:53>: I have completed the initial wireframe of the "Registrees" screen, which can be found here:
- https://www.figma.com/file/1Bs8zp5JTaQrc2IvCFwrpH/Registree

I will now proceed with actually creating the app, and making this screen a reality. Reason being is that it is better to do this in waves than to have an entire design that doesn't work, or put in so much effort into the design but not actually getting deep in the weeds to develop the app itself.

Looking forward to next steps :)
*** DONE Research guides on how to incorporate React Native with Entity framework (C# / .NET) and get the basic 'Create React Native App' going to further build upon
<2023-05-18 Thu 16:36>: This looks like a promising guide to check out:
- https://www.freecodecamp.org/news/create-a-react-app-with-a-dot-net-backend/

<2023-05-19 Fri 13:57>: I did a bit of research, and found this particular Reddit post:
- https://www.reddit.com/r/reactnative/comments/p9ncor/aspnet_with_react_native/

Basically, you can just create the React Native app to begin with, and then add the ASP.NET backend later at any time.

I think I will proceed with tihs in mind.

<2023-05-19 Fri 13:58>: Another piece of advice in that same Reddit thread was this:
#+begin_src text
And for ASP.NET you just want to be running it as an API. So try looking at their API docs.
#+end_src

Related API link to ASP.NET API:
- https://dotnet.microsoft.com/en-us/apps/aspnet/apis

Related general ASP.NET link as well:
- https://dotnet.microsoft.com/en-us/apps/aspnet

With this in mind, I think this research is complete as I will focus on creating the React Native portion first, and then add the ASP.NET backend afterwards.
*** DONE Utilize 'Create React Native' app first so that I can template it to the Figma design template accordingly
<2023-05-19 Fri 14:01>: I will utilize the React Native docs first here to create the related 'Create React Native' app accordingly:
- https://reactnative.dev/

<2023-05-19 Fri 15:36>: I referred to the 'Getting Started' section of the 'React Native' docs page which redirected to the 'Setting up the development environment' page:
- https://reactnative.dev/docs/environment-setup

Basically, there are two ways to do this, you can either go with their suggested 'Expo' method which is yet another third party outside of React that handles development, or you have to use 'React Native CLI' with 'Android Studio' and 'XCode'. I think you HAVE to use XCode on iOS meaning I could only develop with a Mac but I can probably get away with just using 'Android Studio' later on anyway.

I think the safest route would be to just make it in web, test in browser with a 'mobile' view, and test later upon deployment of the app on a site like 'Render.com' or something.

I then ran the following command to create the default 'expo' app within a 'client' folder since I wanted to maintain the same kind of structure as the Flatiron projects where the 'client' folder stores the frontend facing app, and everything else in the root directory is the backend app itself (in this case, the C# / ASP.NET backend portion of the app):
#+begin_src bash
sam@notestation ~/hub/Registree $ npx create-expo-app client
Need to install the following packages:
  create-expo-app@1.3.3
Ok to proceed? (y) Y
âœ” Downloaded and extracted project files.
> npm install
npm WARN deprecated @npmcli/move-file@1.1.2: This functionality has been moved to @npmcli/fs
npm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated
npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated
npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated
npm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated
npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
npm WARN deprecated uglify-es@3.3.9: support for ECMAScript is superseded by `uglify-js` as of v3.13.0

added 1216 packages, and audited 1217 packages in 47s

62 packages are looking for funding
  run `npm fund` for details

14 vulnerabilities (9 moderate, 5 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.


âœ… Your project is ready!

To run your project, navigate to the directory and run one of the following npm commands.

- cd client
- npm run android
- npm run ios # you need to use macOS to build the iOS project - use the Expo app if you need to do iOS development without a Mac
- npm run web
#+end_src

I then cd'd to the 'client' folder, and ran the 'npm run web' command:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npm run web

> client@1.0.0 web
> expo start --web

Starting project at /home/sam/hub/Registree/client
CommandError: It looks like you're trying to use web support but don't have the required dependencies installed.

Please install react-native-web@~0.18.10, react-dom@18.2.0, @expo/webpack-config@^18.0.1 by running:

npx expo install react-native-web@~0.18.10 react-dom@18.2.0 @expo/webpack-config@^18.0.1

If you're not using web, please ensure you remove the "web" string from the platforms array in the project Expo config.
#+end_src

With this error message in mind, I installed the related dependencies with this command:
#+begin_src bash
npx expo install react-native-web@~0.18.10 react-dom@18.2.0 @expo/webpack-config@^18.0.1
#+end_src

Related output:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npx expo install react-native-web@~0.18.10 react-dom@18.2.0 @expo/webpack-config@^18.0.1
â€º Installing 3 SDK 48.0.0 compatible native modules using npm
> npm install
npm WARN deprecated stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility

added 359 packages, and audited 1576 packages in 23s

102 packages are looking for funding
  run `npm fund` for details

15 vulnerabilities (10 moderate, 5 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
#+end_src

I then proceeded with running the 'npm run web' command again, and received the following output:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npm run web

> client@1.0.0 web
> expo start --web

Starting project at /home/sam/hub/Registree/client
Starting Metro Bundler
Starting Webpack on port 19006 in development mode.

â€º Scan the QR code above with Expo Go (Android) or the Camera app (iOS)

â€º Web is waiting on http://localhost:19006

â€º Press a â”‚ open Android
â€º Press w â”‚ open web

â€º Press j â”‚ open debugger
â€º Press r â”‚ reload app
â€º Press m â”‚ toggle menu

â€º Press ? â”‚ show all commands
#+end_src

<2023-05-19 Fri 15:47>: The 'Expo' app on Android doesn't seem to be working but utilizing the 'http://localhost:19006/' local web address seems to be fine within Firefox without an issue.

<2023-05-19 Fri 15:49>: I checked the error log for the 'Expo' mobile app, and received the following:
#+begin_src bash
Uncaught Error: java.net SocketTimeoutException: failed to connect to /192.168.0.100 (port 19000) from /192.168.0.102 (port 57244) after 10000 ms
15:48:59 Fatal Error
#+end_src

I researched this particular 'Uncaught Error: java.net SocketTimeoutException: failed to connect to' error, and found these related posts:
- https://github.com/expo/create-react-native-app/issues/876
- https://stackoverflow.com/questions/66996249/uncaught-error-java-net-sockettimeoutexception-failed-to-connect-to-192-168-0

I then was led to this page to enable the 'Developer Mode' on my Google Pixel phone which I enabled by going to Settings > About phone > and tapped on the 'Build number' 7 times:
- https://developer.android.com/studio/debug/dev-options

<2023-05-19 Fri 16:08>: I did further research on this, and this appears to be an issue with my router configuration probably according to this article:
- https://mdi.hashnode.dev/react-native-issue-fix-network-response-time-out-error-when-attempting-to-connect-to-expo-app-on-mobile-device

With this in mind, I used the suggested command:
#+begin_src bash
npx expo start --tunnel
#+end_src

And now, I'm able to see 'Open up App.js to start working on your app!' default message on the Google Pixel phone as well.

<2023-05-19 Fri 16:13>: I think for now, I will just develop the 'web' version and model the browser to appear like a Google Pixel for now since I think I will actually need a USB cable for this kind of development later on.

<2023-05-19 Fri 16:34>: I am slowly building the page to spec, but am quickly realizing that you can't just use basic HTML to do so like a normal 'React' app would.

This is confirmed through this StackOverflow post:
- https://stackoverflow.com/questions/29334984/render-html-in-react-native

I found this because I was trying to figure out how to use basic div tags to section off the app for various sections.

The idea is

<2023-05-19 Fri 16:41>: I then found out by literally researching 'div tag equivalent in React Native' that there IS a component in React Native that is basically a container similar to a 'div' tag in React Native, and it's name is 'View':
- https://reactnative.dev/docs/view

<2023-05-19 Fri 16:57>: I am slowly getting there to be able to add the React Native app components to match the wireframe.

It's not as quick as just using HTML though so its very barebones and elementary right now, but I'm getting there thankfully.

<2023-05-22 Mon 20:16>: Two things I can look into to solve the width and height dimensions issue in this case is to use the 'useWindowDimensions' API:
- https://reactnative.dev/docs/usewindowdimensions

It appears to be an idea in which you can just assign a constant variable's values to the output of the 'useWindowDimensions' API according the MDN docs page:
- https://reactnative.dev/docs/usewindowdimensions

The 'PixelRatio' API might be helpful for pictures being displayed across multiple devices running the application as well:
- https://reactnative.dev/docs/pixelratio.html

<2023-06-10 Sat 10:29>: The app itself works with 'npm start --prefix client', so I am marking this task as complete.

