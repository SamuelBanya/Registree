#+TODO: TODO(t) IN-PROGRESS (p) | DONE(d) CANCELLED(c)
#+PRIORITIES: 1 5 3
* Jira Tickets
** Todo
*** TODO Add the 'ASP.NET' backend to the project as well
<2023-05-19 Fri 14:01>: I plan on adding the 'ASP.NET' backend later.

Related links to use for reference:
- Related API link to ASP.NET API:
- https://dotnet.microsoft.com/en-us/apps/aspnet/apis
- Related general ASP.NET link as well:
- https://dotnet.microsoft.com/en-us/apps/aspnet

I will have to create a related database schema for what I expect to store in the backend.

From the top of my head, this is probably what I should use in terms of database entries for anyone who wants to 'login' to the app to create private lists since I want people to just use the app if they don't care about privacy, but give them the option to be a bit more secure if they want to:
- User:
- Email address
- Instagram account
- Facebook account
- TikTok account

Related YouTube videos for reference:
- #1 - Build Quiz App in React & Asp.Net Core Web API with Latest Material UI (https://www.youtube.com/watch?v=MV1rEWlcW7U)
- React with .NET Web API â€“ Basic App Tutorial (https://www.youtube.com/watch?v=4RKuyp_bOhY)

Related guides for reference:
- https://learn.microsoft.com/en-us/visualstudio/javascript/tutorial-asp-net-core-with-react?view=vs-2022
- https://medium.com/bb-tutorials-and-thoughts/how-to-develop-and-build-react-app-with-net-core-backend-59d4fc5e3041
- https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-5.0&tabs=visual-studio

*** TODO Make sure that the website is mobile responsive to all devices at the very beginning to prevent layout issues later on
<2023-05-18 Thu 16:36>: I will need to check out the React Native docs to see if this is taken care of, or if this is something I just have to implement via '@media' tags at the very beginning of the project.
** In Progress
*** Create Figma template for overlay menus for 'Registry Wizard Menu' components for Desktop and Mobile
<2023-09-14 Thu 18:52>: I am doing related research online for the related wizard menus required for the 'Add New Registree' button.

Basically, I want the user to be able to enter the following information:

First wizard menu screen:
- Registree Name:
- Source: (Amazon, Target, eBay, Walmart)

Each registry list should contain the following items:
- "+" Add Button: This allows you to add another item to the list, and should be easily accessible
- Item Name:
- Link:
- Price:

<2023-09-14 Thu 19:54>: I utilized this project for the use of the downard facing Chevron icon:
- https://www.figma.com/community/file/1072278169477341754

In terms of progression, I have currently finished the first part of the

Also, note, I used this lady's wizard form for ideas as well:
- https://dribbble.com/shots/4403797-Wizard-UI-Design

This one looks great for the profile page itself:
- https://dribbble.com/shots/16803974-Form-Elements-V1

This looks like a good reference for a form requiring the user to enter dates and other similar info:
- https://dribbble.com/shots/3805056-Wizard-Form-Concept

This seems like a good idea for a wireframe workflow:
- https://dribbble.com/shots/6542601-App-s-Wireframe-Userflow-for-Fast-KYC

I love the simplicity and readibility of this form example:
- https://dribbble.com/shots/2938610-Material-Bootstrap-Wizard-Book-Room

** COMPLETED TASKS
*** DONE Come up with app name that doesn't already exist
<2023-05-16 Tue 11:17>: I thought of using the name 'Gifter', but it's already taken which totally sucks:
- https://wegifter.co/

However, to be fair, that website and app is completely dedicated to children gifts and not at all related to the ideas I had.

My idea was to make the process of assembling gift lists with links way easier.

The process would include:
- A super easy to use gift intake form which includes name of gift, price, and link to the actual gift (Amazon, Walmart, eBay, etc)
- No need to authenticate to use the app, only if you want to store previous lists for future reference that are associated to your account
- Shortened URL links to quickly share with your friends and family

<2023-05-16 Tue 11:29>: I tried to use the following sites to generate names:
- https://www.panabee.com/app-name/ideas
- https://www.wix.com/tools/bng-list
- https://namelix.com/app/

Idea names:
- Linker
- Linkwrap
- Tanglify
- SurpriseSwap
- Giftee (taken)
- Giftomania (Tina's idea) (taken)
- Giftshare (taken)
- Giftly (taken)
- Quick Gifts (taken)
- Giver (taken)
- GiftTree (taken)
- Gift Linker (taken)
- Givey (taken)

Other ideas to generate names
- Secret santa all year
- Presents
- Sharing
- Link
- Hub
- List
- Giving

<2023-05-16 Tue 16:47>: I have tried to wrap my head around an idea for a name all day but just can't think of a good one yet.

The main ideas I want to get across in a name is the idea to share gifts easily with shortened, spreadable links.

I wanted to basically do what Linktree is doing, but for gifts since I always hated having to figure out what people wanted for Christmas because they never sent me a list of what to surprise them with.

<2023-05-18 Thu 13:34>: I settled with the name 'Registree' so I'm glad that's not taken. It's crazy since every other single name pretty was taken but I guess this is a very popular idea to do, so time for my spin on it :)
*** DONE Make Figma wireframe template for website, iPad, and mobile (iPhone / Android) versions of the "Registree" portion of the application
<2023-05-16 Tue 11:24>: I need to make a Figma wireframe that incorporates the following design patterns:
- Website (normal desktop resolution)
- iPad
- Mobile devices (iPhone, Android)

There are simpler ways to deal with this using the '@media' tag so try this method first, or see if React Native allows you to do this automatically.

Or, see if Tailwind CSS or Material UI can be used for this purpose alone.

<2023-05-16 Tue 11:42>: I really like how this form looks, so this would be a good design idea for the 'login' / 'register' screen:
- https://www.brandbucket.com/app-name-generator

<2023-05-18 Thu 14:56>: My current design template can be found here:
- https://www.figma.com/file/1Bs8zp5JTaQrc2IvCFwrpH/Registree

Some good guides and resources I found along the way include the following:
- https://hackernoon.com/10-best-free-vector-icon-resources-for-app-design-web-design-in-2018-24e02704331b
- https://www.freepik.com/

In my search to find the '2x3' circle grid icon, I found this really good explanation of the colloquial names for some of the menu icons in general:
- https://ux.stackexchange.com/questions/115468/what-is-the-difference-between-these-2-menu-icons-3-dots-kebab-and-3-lines-h

I found this one to be close, but it's '3x3' instead:
- https://www.freepik.com/free-icon/menu_15601292.htm

I went ahead and modified that grid icon to be '2x3' instead manually, so I was able to fix the problem.

I really like the style of these kind of black and white icons here but these are primarily for social media:
- https://www.freepik.com/free-vector/social-media-icons-vector-set-with-facebook-instagram-twitter-tiktok-youtube-logos_17221200.htm#query=Amazon%20icon&position=0&from_view=search&track=ais

<2023-05-18 Thu 16:18>: I found the Amazon icon here and they even offer svg icons too:
- https://icons8.com/icons/set/amazon

I found the eBay one right here too:
- https://icons8.com/icons/set/ebay

I found the Walmart icon here:
- https://icons8.com/icons/set/walmart

I found the Target icon here:
- https://icons8.com/icons/set/target-logo

I found the Clipboard icon here:
- https://icons8.com/icons/set/clipboard-icon

I found a more black color themed clipboard icon here:
- https://freesvg.org/checklist-silhouette

I found the Share icon here:
- https://icons8.com/icon/set/share/sf-black-filled

I found the Profile icon here:
- https://freesvg.org/users-profile-icon

<2023-05-18 Thu 16:57>: For the bottom buttons of the app, I can easily just find related SVG icons for something like the following:
- Lists
- Share
- Profile

I would be interested if I could find a way to somehow take the existing mobile ready frame design and just scale it up to iPad without heavily having to adjust sizes too much. There's got to be a way to do this, so I will do some research into this.

Also, this app is going to come in super handy for my actual baby shower registry coming up this year :)

<2023-05-18 Thu 17:15>: Also, for future reference, here is the Linktree image I used as a reference for the overall design since this is really just a clone app that's taken to the next level with a separate mindset:
- https://linktr.ee/blog/the-power-of-linktree-in-the-palm-of-your-hand-introducing-our-new-mobile-app/

<2023-05-19 Fri 13:53>: I have completed the initial wireframe of the "Registrees" screen, which can be found here:
- https://www.figma.com/file/1Bs8zp5JTaQrc2IvCFwrpH/Registree

I will now proceed with actually creating the app, and making this screen a reality. Reason being is that it is better to do this in waves than to have an entire design that doesn't work, or put in so much effort into the design but not actually getting deep in the weeds to develop the app itself.

Looking forward to next steps :)
*** DONE Research guides on how to incorporate React Native with Entity framework (C# / .NET) and get the basic 'Create React Native App' going to further build upon
<2023-05-18 Thu 16:36>: This looks like a promising guide to check out:
- https://www.freecodecamp.org/news/create-a-react-app-with-a-dot-net-backend/

<2023-05-19 Fri 13:57>: I did a bit of research, and found this particular Reddit post:
- https://www.reddit.com/r/reactnative/comments/p9ncor/aspnet_with_react_native/

Basically, you can just create the React Native app to begin with, and then add the ASP.NET backend later at any time.

I think I will proceed with tihs in mind.

<2023-05-19 Fri 13:58>: Another piece of advice in that same Reddit thread was this:
#+begin_src text
And for ASP.NET you just want to be running it as an API. So try looking at their API docs.
#+end_src

Related API link to ASP.NET API:
- https://dotnet.microsoft.com/en-us/apps/aspnet/apis

Related general ASP.NET link as well:
- https://dotnet.microsoft.com/en-us/apps/aspnet

With this in mind, I think this research is complete as I will focus on creating the React Native portion first, and then add the ASP.NET backend afterwards.
*** DONE Utilize 'Create React Native' app first so that I can template it to the Figma design template accordingly
<2023-05-19 Fri 14:01>: I will utilize the React Native docs first here to create the related 'Create React Native' app accordingly:
- https://reactnative.dev/

<2023-05-19 Fri 15:36>: I referred to the 'Getting Started' section of the 'React Native' docs page which redirected to the 'Setting up the development environment' page:
- https://reactnative.dev/docs/environment-setup

Basically, there are two ways to do this, you can either go with their suggested 'Expo' method which is yet another third party outside of React that handles development, or you have to use 'React Native CLI' with 'Android Studio' and 'XCode'. I think you HAVE to use XCode on iOS meaning I could only develop with a Mac but I can probably get away with just using 'Android Studio' later on anyway.

I think the safest route would be to just make it in web, test in browser with a 'mobile' view, and test later upon deployment of the app on a site like 'Render.com' or something.

I then ran the following command to create the default 'expo' app within a 'client' folder since I wanted to maintain the same kind of structure as the Flatiron projects where the 'client' folder stores the frontend facing app, and everything else in the root directory is the backend app itself (in this case, the C# / ASP.NET backend portion of the app):
#+begin_src bash
sam@notestation ~/hub/Registree $ npx create-expo-app client
Need to install the following packages:
  create-expo-app@1.3.3
Ok to proceed? (y) Y
âœ” Downloaded and extracted project files.
> npm install
npm WARN deprecated @npmcli/move-file@1.1.2: This functionality has been moved to @npmcli/fs
npm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated
npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated
npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated
npm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated
npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
npm WARN deprecated uglify-es@3.3.9: support for ECMAScript is superseded by `uglify-js` as of v3.13.0

added 1216 packages, and audited 1217 packages in 47s

62 packages are looking for funding
  run `npm fund` for details

14 vulnerabilities (9 moderate, 5 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.


âœ… Your project is ready!

To run your project, navigate to the directory and run one of the following npm commands.

- cd client
- npm run android
- npm run ios # you need to use macOS to build the iOS project - use the Expo app if you need to do iOS development without a Mac
- npm run web
#+end_src

I then cd'd to the 'client' folder, and ran the 'npm run web' command:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npm run web

> client@1.0.0 web
> expo start --web

Starting project at /home/sam/hub/Registree/client
CommandError: It looks like you're trying to use web support but don't have the required dependencies installed.

Please install react-native-web@~0.18.10, react-dom@18.2.0, @expo/webpack-config@^18.0.1 by running:

npx expo install react-native-web@~0.18.10 react-dom@18.2.0 @expo/webpack-config@^18.0.1

If you're not using web, please ensure you remove the "web" string from the platforms array in the project Expo config.
#+end_src

With this error message in mind, I installed the related dependencies with this command:
#+begin_src bash
npx expo install react-native-web@~0.18.10 react-dom@18.2.0 @expo/webpack-config@^18.0.1
#+end_src

Related output:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npx expo install react-native-web@~0.18.10 react-dom@18.2.0 @expo/webpack-config@^18.0.1
â€º Installing 3 SDK 48.0.0 compatible native modules using npm
> npm install
npm WARN deprecated stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility

added 359 packages, and audited 1576 packages in 23s

102 packages are looking for funding
  run `npm fund` for details

15 vulnerabilities (10 moderate, 5 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
#+end_src

I then proceeded with running the 'npm run web' command again, and received the following output:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npm run web

> client@1.0.0 web
> expo start --web

Starting project at /home/sam/hub/Registree/client
Starting Metro Bundler
Starting Webpack on port 19006 in development mode.

â€º Scan the QR code above with Expo Go (Android) or the Camera app (iOS)

â€º Web is waiting on http://localhost:19006

â€º Press a â”‚ open Android
â€º Press w â”‚ open web

â€º Press j â”‚ open debugger
â€º Press r â”‚ reload app
â€º Press m â”‚ toggle menu

â€º Press ? â”‚ show all commands
#+end_src

<2023-05-19 Fri 15:47>: The 'Expo' app on Android doesn't seem to be working but utilizing the 'http://localhost:19006/' local web address seems to be fine within Firefox without an issue.

<2023-05-19 Fri 15:49>: I checked the error log for the 'Expo' mobile app, and received the following:
#+begin_src bash
Uncaught Error: java.net SocketTimeoutException: failed to connect to /192.168.0.100 (port 19000) from /192.168.0.102 (port 57244) after 10000 ms
15:48:59 Fatal Error
#+end_src

I researched this particular 'Uncaught Error: java.net SocketTimeoutException: failed to connect to' error, and found these related posts:
- https://github.com/expo/create-react-native-app/issues/876
- https://stackoverflow.com/questions/66996249/uncaught-error-java-net-sockettimeoutexception-failed-to-connect-to-192-168-0

I then was led to this page to enable the 'Developer Mode' on my Google Pixel phone which I enabled by going to Settings > About phone > and tapped on the 'Build number' 7 times:
- https://developer.android.com/studio/debug/dev-options

<2023-05-19 Fri 16:08>: I did further research on this, and this appears to be an issue with my router configuration probably according to this article:
- https://mdi.hashnode.dev/react-native-issue-fix-network-response-time-out-error-when-attempting-to-connect-to-expo-app-on-mobile-device

With this in mind, I used the suggested command:
#+begin_src bash
npx expo start --tunnel
#+end_src

And now, I'm able to see 'Open up App.js to start working on your app!' default message on the Google Pixel phone as well.

<2023-05-19 Fri 16:13>: I think for now, I will just develop the 'web' version and model the browser to appear like a Google Pixel for now since I think I will actually need a USB cable for this kind of development later on.

<2023-05-19 Fri 16:34>: I am slowly building the page to spec, but am quickly realizing that you can't just use basic HTML to do so like a normal 'React' app would.

This is confirmed through this StackOverflow post:
- https://stackoverflow.com/questions/29334984/render-html-in-react-native

I found this because I was trying to figure out how to use basic div tags to section off the app for various sections.

The idea is

<2023-05-19 Fri 16:41>: I then found out by literally researching 'div tag equivalent in React Native' that there IS a component in React Native that is basically a container similar to a 'div' tag in React Native, and it's name is 'View':
- https://reactnative.dev/docs/view

<2023-05-19 Fri 16:57>: I am slowly getting there to be able to add the React Native app components to match the wireframe.

It's not as quick as just using HTML though so its very barebones and elementary right now, but I'm getting there thankfully.

<2023-05-22 Mon 20:16>: Two things I can look into to solve the width and height dimensions issue in this case is to use the 'useWindowDimensions' API:
- https://reactnative.dev/docs/usewindowdimensions

It appears to be an idea in which you can just assign a constant variable's values to the output of the 'useWindowDimensions' API according the MDN docs page:
- https://reactnative.dev/docs/usewindowdimensions

The 'PixelRatio' API might be helpful for pictures being displayed across multiple devices running the application as well:
- https://reactnative.dev/docs/pixelratio.html

<2023-06-10 Sat 10:29>: The app itself works with 'npm start --prefix client', so I am marking this task as complete.
*** DONE Install 'yarn' package manager to match what they use at work
<2023-06-18 Sun 16:12>: I always wanted to check out 'yarn' so I installed it with the help of this guide:
- https://www.hostinger.com/tutorials/how-to-install-yarn

I used the following commands to do so:
#+begin_src bash
npm install --global yarn
#+end_src

I verified the Yarn installation with the output of this command:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ yarn --version
1.22.19
#+end_src
*** DONE Use 'create-react-app' to create another frontend site for this project, and enforce Typescript
<2023-06-18 Sun 16:10>: I would like to start from scratch and just use the 'create-react-app' to create another React site, and enforce Typescript.

<2023-06-18 Sun 16:14>: I found the related docs page on this topic since you can install 'create-react-app' and enforce TypeScript from the start:
- https://create-react-app.dev/docs/adding-typescript/

Related command:
#+begin_src bash
yarn create react-app my-app --template typescript
#+end_src

<2023-07-01 Sat 15:10>: I did this already during the last time I worked on this project so this task is complete.
*** DONE Convert application to 'NextJS' app, and adjust styling to match Figma template
<2023-08-20 Sun 10:41>: I realized after a bit of thinking that it would kind of pointless to use 'create-react-app' as the scaffolding for this app since Facebook (Meta) doesn't even support it anyway and pretty much abandoned it.

That being noted, I might as well use NextJS anyway.

With this in mind, I followed this guide:
- https://nextjs.org/learn/basics/create-nextjs-app/setup

Related command I used:
#+begin_src bash
npx create-next-app@latest registree --use-npm --example "https://github.com/vercel/next-learn/tree/master/basics/learn-starter"
#+end_src

<2023-08-20 Sun 11:21>: On a side note, I also forced Typescript by literally renaming every new page to be a '.tsx' file as per this NextJS guide page that tells you that NextJS handles the rest:
- https://nextjs.org/docs/pages/building-your-application/configuring/typescript

<2023-08-20 Sun 11:49>: I also used these commands to install MaterialUI and its associated custom 'roboto' font as per my other 'Match Figma template of front page to React site' task's notes:
#+begin_src bash
sam@notestation ~/hub/Registree/registree $ npm install @mui/material @emotion/react @emotion/styled

sam@notestation ~/hub/Registree/registree $ npm install @fontsource/roboto

sam@notestation ~/hub/Registree/registree $ npm install @mui/icons-material

sam@notestation ~/hub/Registree/registree $ npm install react-icons
#+end_src

I then added the font references to the 'index.tsx' page in the project:
#+begin_src typescript
// Adding MaterialUI's 'roboto' font:
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
#+end_src

<2023-08-20 Sun 12:06>: The next thing I have to do is to actually make the CSS match, so it will take some reading more into the actual guide itself, as well as some styling docs from NextJS so I can make sure that the overarching 'globals.css' stylesheet is actually included in the project as well:
- https://nextjs.org/learn/basics/navigate-between-pages/link-component

NOTE:
- I can also look at the previous code as well just in case I am missing a few stylesheet references too:
- https://github.com/SamuelBanya/Registree/tree/6027cd78760bf85c384902d53d38095992111284

Also, here are some references I might need to use to add a 'Head' component from NextJS to potentially allow for custom fonts:
- https://www.reddit.com/r/nextjs/comments/pfut94/how_to_load_custom_fonts_in_nextjs/
- https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/
- https://medium.com/frontendweb/how-to-add-font-in-next-js-7a7fba80d528

<2023-08-29 Tue 21:03>: Here's how to actually access the latest page:
- http://localhost:3000/registrees/registree-page

<2023-08-29 Tue 21:20>: Here's how I figured out how to actually add the appropriate global styling that I wanted to utilize, aka I followed this tutorial guide on the NextJS docs page:
- https://nextjs.org/learn/basics/assets-metadata-css/global-styles

I then added the 'pages/_app.js' which acts as more of the overarching file that dictates CSS styling:
#+begin_src typescript
  import '../styles/global.css';

  export default function App({ Component, pageProps }) {
    return <Component {...pageProps} />;
  }
#+end_src

I then saved it, and that pretty much allowed the global styling to be utilized as intended.

<2023-08-30 Wed 19:27>: I figured out how to force the related icons from 'React Icons' to be black, aka you have to wrap a context provider around each icon:
- https://github.com/react-icons/react-icons#readme
- https://stackoverflow.com/questions/56636280/how-to-style-react-icons

With this in mind, I pretty much did the following as an example in which I changed the 'FaUser' icon to have a black color as opposed to the ugly default grey color:
#+begin_src typescript
  <IconContext.Provider
    value={{ color: "black" }}
  >
    <FaUser />
  </IconContext.Provider>
#+end_src

<2023-08-30 Wed 19:39>: I used this as a reference for changing the 'padding' attribute:
- https://stackoverflow.com/questions/52124938/how-to-add-padding-and-margin-to-all-material-ui-components

I used this as a reference for changing the 'size' attribute for the React-Icons based icons:
- https://stackoverflow.com/questions/43768629/how-to-scale-large-font-awesome-icons-from-the-react-icons-package

<2023-08-30 Wed 20:04>: My biggest issue right now is that I can't seem to figure out why the 'MenuGrid' component has a larger width than the 'Registrees' heading, and the 'ADD NEW REGISTREE' button

<2023-08-31 Thu 21:05>: I was able to adjust the styling of the icons and grids a bit better today.

I also separated out the NavBar into its own component which is a bit more cleaner.

The one thing I found was the 'Draggable' library that I used in a project a few months back, more specifically this one via these links:
- https://www.npmjs.com/package/react-draggable#draggable-usage
- http://react-grid-layout.github.io/react-draggable/example/
- https://github.com/react-grid-layout/react-draggable/blob/master/example/example.js

The closest example I could use is probably the 'I snap to a 50 x 50 grid' example from that demo page:
#+begin_src typescript
  <Draggable grid={[50, 50]} {...dragHandlers}>
    <div className="box">I snap to a 50 x 50 grid</div>
  </Draggable>
#+end_src

This is so that I can drag each of the registree sections via the 'MdDragIndicator' components in a grid.

It would probably have to be a grid of 135 pixels or so. This might come in handy, but I just want to be able to drag and drop them within a given canvas section.

I wonder if there's any other libraries that does this kind of functionality, but I'll have to do research later on.

The bigger challenge I could not figure out is how to make the 'MdDragIndicator' sections to align vertically. I most likely have to mess with the overarching '<Grid item xs={2}>' component in that case with some kind of alignment property. Something that would allow me to center align the actual icon along the edge of the grid itself.

Either way, it's getting there :)

<2023-09-05 Tue 21:00>: I was able to figure out how to center align the 'move' icon button and the 'switch' icon button by using these links as references:
- The Complete Guide to Material UI Grid Align Items (https://www.youtube.com/watch?v=gz57qOkCBA4
- https://smartdevpreneur.com/the-complete-guide-to-material-ui-grid-align-items/

Basically, it just involves adding these properties to an existing 'Grid' item:
#+begin_src js
alignItems="center" display="flex"
#+end_src

<2023-09-06 Wed 20:52>: I made pretty good headway today, but the main thing I would need to do is to adjust the navbar so that the components in the 'Stack' shift dynamically as the page gets slowly less wide.

Ideally, the width of the individual icon buttons themselves need to be adjusted in a calculated percentage as the page gets slowly thinner to mobile size.

After the page reaches mobile view, then the navbar should be displayed at the bottom (which it currently does) but the buttons would be more like squares, and less rectangular shaped.

<2023-09-06 Wed 20:55>: One other thing to note:
- To keep things on the easier end and to be more focused on the entire app experience itself, I would prefer an overlay modal window that would take up the entire screen but could be exited at any time with an 'x' button
- This could accommodate the 'Share' button which is easily expected by most users of a modern app
- I probably will have to create and design a profile page, but that's more for users who want to login to the app to create more secure registree lists which are otherwise public --> For any public users, I will display a disclaimer stating that I would not be held responsible for any public lists, but advocate for this usage to easily get a user quickly used to creating new registrees

<2023-09-07 Thu 20:49>: Here are the references I used for the Theme override ideas for the header, as well as the increasing the spacing between the actual navbar buttons:
- https://mui.com/system/getting-started/usage/#responsive-values
- https://mui.com/material-ui/react-typography/
- https://mui.com/material-ui/customization/typography/#responsive-font-sizes
- https://stackoverflow.com/questions/48319372/changing-font-family-of-all-material-ui-components
- https://mui.com/system/properties/#properties-reference-table

<2023-09-07 Thu 21:29>: I tried researching how to scale the related icons accordingly but can't seem to find anything related to 'sx' props.

I mention this because I was able to solve a width problem by using 'sx' props to adjust the width dynamically based upon the various Material UI based width of the page for a completely separate problem, which does not translate to the issue at hand since I want to do the same thing but with the IconContext.Provider instead for the 'size' attribute:
#+begin_src typescript
        <Grid item xs={4}>
          <IconButton
            sx={{
              width:
              {
                xs: 100,
                sm: 150,
                md: 175,
                lg: 200,
                xl: 225
              },
              height: "85px",
              backgroundColor: "#FFF",
              borderRadius: "15px",
              border: "4px solid #000",
            }}
            aria-label="View current user's Registrees"
          >
            <IconContext.Provider
              value={{ color: "black", size: "50" }}
            >
              <FaClipboard />
            </IconContext.Provider>
          </IconButton>
        </Grid>
#+end_src

I made a related GitHub issues page here:
- https://github.com/react-icons/react-icons/issues/810

The only thing that gets close is this:
- https://stackoverflow.com/questions/43768629/how-to-scale-large-font-awesome-icons-from-the-react-icons-package?noredirect=1&lq=1

<2023-09-11 Mon 19:25>: The remaining portion that I would like to figure out is how to force the 'body' to basically begin with the entire container that's wrapped around the app itself, aka the 'Overarching-Box' section.

<2023-09-12 Tue 19:47>: I changed the '.Overarching-Box' CSS so that it had the following properties to use 'overflow' and 'overflowY' respectively, and also adjusted the main 'body' tag itself to have no margin since it was causing a weird margin boxed in effect:
#+begin_src css
.Overarching-Box {
  height: 100vh;
  overflow: auto;
  overflowY: 'scroll';
  background: linear-gradient(0deg, rgba(0, 0, 0, 0.20) 0%, rgba(0, 0, 0, 0.20) 100%), linear-gradient(180deg, #414141 0%, rgba(65, 65, 65, 0.00) 100%), #00FF94;
  minWidth: 'md';
  flexDirection: 'column';
  display: 'flex';
}

body {
  background-color: black;
  margin: 0;
}
#+end_src

I used this link as a reference:
- https://aguidehub.com/blog/2023-03-17-how-to-make-mui-table-with-body-scrollable-in-react-js/

<2023-09-12 Tue 20:08>: This task is done, so I will merge the associated branch to main on GitHub itself.

*** DONE Match Figma template of front page to React site
<2023-07-01 Sat 15:11>: I am currently in the process of basically moving the 'my-app' section that was created by 'create-react-app' to the root directory.

I then am going to add Material UI to match what is done at work just because its better to just skill up to match their current requirements.

After that, I will flat out try to copy the design one for one, and make it responsive as well.

<2023-07-01 Sat 15:14>: I installed MaterialUI via this command:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npm install @mui/material @emotion/react @emotion/styled
#+end_src

I then installed the related 'Roboto' font as requested by MaterialUI:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npm install @fontsource/roboto
#+end_src

I then added the 'Roboto' font to the 'entry point' of the application which is 'src/index.tsx':
#+begin_src js
// Adding MaterialUI's 'roboto' font:
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
#+end_src

I then added the 'font Icon component' with the following command:
#+begin_src bash
sam@notestation ~/hub/Registree/client $ npm install @mui/icons-material
#+end_src

I also utilized the Material UI example to just add a button on the main page:
- https://mui.com/material-ui/getting-started/usage/

<2023-07-01 Sat 16:24>: Since the re-organization took a bit of effort, I think for next time, my goal is to:
- Create a separate 'Registree' component in the 'client/src/components' directory
- I will then try to make it match the Figma template using 'Grid' components from Material UI:
- https://mui.com/material-ui/react-grid/

<2023-07-22 Sat 23:07>: I am in the process of adding changes to this particular branch of the project:
- https://github.com/SamuelBanya/Registree/tree/Make-Homepage-Model-Figma

After my changes are done, I will then merge this branch into main.

I had to lean on these docs pages to get icons from 'react-icons' into the project, as well as how to use 'IconButtons' from Material UI directly:
- https://react-icons.github.io/react-icons
- https://mui.com/material-ui/react-button/

I also incorporated the 'Switch' button for the 'toggle' style button as well from Material UI:
- https://mui.com/material-ui/react-switch/

So far, I kind of have the spacing right, but the CSS needs to be flush to the left and right for each section. This will require some more research on Material UI directly.

<2023-07-29 Sat 11:21>: I tried to hone in more on the Figma design itself this morning, and made a few revisions.

I found the 'Inter' font used by Figma here:
- https://fonts.google.com/specimen/Inter?preview.text=asdf&preview.text_type=custom

I then found this related StackOverflow post on the topic of importing Google fonts into a React project here:
- https://stackoverflow.com/questions/40769551/how-to-use-google-fonts-in-react-js

I then modified the related 'App.css' file to include:
#+begin_src css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');
#+end_src

I then adjusted the 'Add Registree Button' button's CSS:
#+begin_src css
#Add-Registree-Button {
  border-radius: 20px;
  border: 5px solid #3AFF7D;
  background-color: #FFF;
  /* color: black; */
  /* font-weight: 700; */
  font-family: "Inter", sans-serif;

  color: #000;
  font-family: Inter;
  /* font-size: 50px; */
  font-style: bold;
  /* font-weight: 700; */
}
#+end_src

I solved the issue of the entire 'Add Registree Button' button not being the entire width of the screen by adding the 'fullWidth' to the button itself:
#+begin_src html
          <Grid item xs={12}>
            <Button fullWidth id="Add-Registree-Button" variant="contained">Add New Registree</Button>
          </Grid>
#+end_src

Related Material UI docs page on 'fullWidth' boolean variable:
- https://mui.com/toolpad/reference/components/button/#properties

I then solved the issue with the 'Item' blocks containing white background colors by removing all 'Item' tags from the Grids, and then added an overarching gradient for the '.App':
#+begin_src css
.App {
  background: linear-gradient(0deg, rgba(0, 0, 0, 0.20) 0%, rgba(0, 0, 0, 0.20) 100%), linear-gradient(180deg, #414141 0%, rgba(65, 65, 65, 0.00) 100%), #00FF94;
}
#+end_src

I then found out about the 'Stack' component that can be used to align elements in a row via this page example here:
- https://mui.com/material-ui/react-button/

Here is the more specific 'Stack' component docs page:
- https://mui.com/material-ui/react-stack/

I then applied individual Icon Button changes via the 'sx' prop here:
- https://mui.com/material-ui/api/icon-button/

My goal is once it actually all works, I will probably just create my own version of the 'Icon Button' component so that I don't have to specify the 'sx' props in the open like the current version of the project.

<2023-07-29 Sat 11:38>: After looking in the related MaterialUI docs, I found the 'justifyContent' boolean variable so that I can align the icon buttons in a row:
- https://mui.com/material-ui/react-stack/

<2023-07-29 Sat 13:33>: I also had to separate the 'MenuGrid' into its own component since it has some specific styling that just would clutter up the main page.

I realized I had to use 'ReactNode' in order for me to allow any children to be rendered between the 'MenuGrid' I created.

I used this page as a reference:
- https://www.sharooq.com/solved-type-children-element-has-no-properties-in-common-with-type-intrinsicattributes-react
** TASKS THAT ARE CANCELLED
*** CANCELLED Match Figma template to actual React Native App for 'List' page
<2023-06-10 Sat 10:33>: The current goal is to get the 'List' page to match my Figma template.

This will first involve the use of gradients which apparently aren't even supported by React Native by default.

With this in mind, I had to resort to using 'react-native-linear-gradient' to do this:
- https://www.npmjs.com/package/react-native-linear-gradient

I installed this by using the following:
#+BEGIN_SRC bash
npm install react-native-linear-gradient --save
#+END_SRC

<2023-06-10 Sat 10:42>: I will have to actually model the Figma template later but it doesn't look that hard based upon the docs above.

<2023-06-10 Sat 10:44>: This is the related CSS gradient I got from a related site (https://cssgradient.io/):
#+BEGIN_SRC css
background: rgb(52,53,52);
background: linear-gradient(90deg, rgba(52,53,52,1) 0%, rgba(31,112,78,1) 50%, rgba(14,166,102,1) 100%);
#+END_SRC

<2023-06-10 Sat 13:10>: I got this error when trying to implement 'react-native-linear-gradient':
#+BEGIN_SRC bash
Uncaught TypeError: react_native_web_dist_index__WEBPACK_IMPORTED_MODULE_0__.requireNativeComponent is not a function
    js common.js:6
    Webpack 15
#+END_SRC

After looking into this, this is as a result of me using 'Expo', which is noted on this GitHub Issues page:
- https://github.com/react-native-linear-gradient/react-native-linear-gradient/issues/483

As the last commenter pointed out, I should probably use 'Expo LinearGradient' instead:
- https://docs.expo.dev/versions/latest/sdk/linear-gradient/

I then installed it via this command:
#+BEGIN_SRC bash
npx expo install expo-linear-gradient
#+END_SRC

<2023-06-10 Sat 13:49>: I did more attempts to model the buttons after my Figma which were kind of weird because using the 'color' property was not even getting me anywhere like it should.

That being noted, I found this related StackOverflow post:
- https://stackoverflow.com/questions/44798426/how-to-change-background-color-of-react-native-button

It basically states to just use 'React Native Elements' package for styling buttons via the 'buttonStyle' tag accordingly.

With this in mind, I installed it via this command:
#+BEGIN_SRC bash
npm install @rneui/themed @rneui/base
npm install react-native-safe-area-context
#+END_SRC

<2023-06-10 Sat 14:42>: I had to sift through 3 pages just to figure out how to make bold text for a header for React Native:
- https://stackoverflow.com/questions/35718143/react-native-add-bold-or-italics-to-single-words-in-text-field

I also used the following pages as references to implement 'React-Native-Elements' versions of 'Button', 'Text' and 'Switch' fields along with their appropriate styling:
- https://reactnativeelements.com/docs/components/button#colors
- https://reactnativeelements.com/docs/components/text
- https://reactnativeelements.com/docs/components/switch

<2023-06-10 Sat 15:02>: So far today, I added the following:
- [X] Background gradient
- [X] Button styling
- [X] Bold styling to headers
- [X] Switch buttons

The thing is though, the design still doesn't really match the Figma so it has been an uphill battle.

Honestly, I think the fact that it differs so much from normal React is what makes this process so much harder than it should be.

Even for this 'Link' page that's the home page, I still need to add:
- [ ] The '2x3' move button to be able to move the Registrees around
- [ ] I need the 'Add New Registree' button to actually have black text
- [ ] I need to be able to add the appropriate store icons to the bottom of each Registree container section
- [ ] The 'Registrees', 'Share', and 'Profile' buttons need to be stacked alongside each other
- [ ] The same 'Registrees', 'Share', and 'Profile' buttons need to be replaced with icons from 'React-icons' (https://react-icons.github.io/react-icons/)

<2023-06-10 Sat 15:20>: One thing I should maybe consider later is to add 'react-native-material' to the project since you can use 'Stack' sections to stack the buttons together more easily:
- https://www.react-native-material.com/
- https://www.react-native-material.com/docs/layout/stack

It HAS to be what 'React Native Elements' is using since they are literally using 'Stack' elements in their 'Button' example, yet 'Stack' elements are specific to MUI:
- https://reactnativeelements.com/docs/components/button

Or, I could opt to just use 'flex' options for the containers themselves as shown in this example:
- https://snack.expo.dev/@awhite/two-buttons-with-equal-width-horizontally-fill-the-screen-in-react-native

Or, I could even opt for a vanilla approach using 'flex' options here too from the React Native docs:
- https://snack.expo.dev/@awhite/two-buttons-with-equal-width-horizontally-fill-the-screen-in-react-native

Choices and decisions for sure :)

<2023-06-18 Sun 15:59>: I cancelled the usage of React Native for this project as I find React Native to be way too clunky for what I want to do.

I really just wanted to make a React app that displayed nicely on all devices, but its mostly a website anyway, so let's keep it as just a React app, but with Typescript.
